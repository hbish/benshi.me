---
export interface Props {
  target: string
}

const { target } = Astro.props
---

<div class="webmention-count" data-target={target}>
  <span class="interaction-stat">
    <svg class="stat-icon" viewBox="0 0 24 24" fill="currentColor">
      <path
        d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"
      ></path>
    </svg>
    <span class="count likes-count">0</span>
  </span>
  <span class="interaction-stat">
    <svg class="stat-icon" viewBox="0 0 24 24" fill="currentColor">
      <path
        d="M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h4l4 4 4-4h4c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"
      ></path>
    </svg>
    <span class="count replies-count">0</span>
  </span>
</div>

<script>
  class WebmentionCount {
    constructor(element) {
      this.element = element
      this.target = element.dataset.target
      this.fetchCounts()
    }

    async fetchCounts() {
      if (!this.target) return

      try {
        const response = await fetch(
          `https://webmention.io/api/count?target=${encodeURIComponent(this.target)}`
        )
        const data = await response.json()

        const likesCount = (data.type?.like || 0) + (data.type?.repost || 0)
        const repliesCount = (data.type?.reply || 0) + (data.type?.mention || 0)
        const totalCount = likesCount + repliesCount

        this.updateCount('.likes-count', likesCount)
        this.updateCount('.replies-count', repliesCount)
        this.updateCount('.total-count', totalCount)

        // Show/hide stats based on counts
        this.toggleVisibility('.interaction-stat:first-child', likesCount > 0)
        this.toggleVisibility('.interaction-stat:nth-child(2)', repliesCount > 0)
        this.toggleVisibility('.interaction-stat:last-child', totalCount > 0)
      } catch {
        // Silently handle fetch errors for webmention counts
      }
    }

    updateCount(selector, count) {
      const element = this.element.querySelector(selector)
      if (element) {
        element.textContent = count.toString()
      }
    }

    toggleVisibility(selector, show) {
      const element = this.element.querySelector(selector)
      if (element) {
        element.style.display = show ? 'flex' : 'none'
      }
    }
  }

  // Initialize webmention counts
  document.addEventListener('DOMContentLoaded', () => {
    const elements = document.querySelectorAll('.webmention-count')
    elements.forEach(element => new WebmentionCount(element))
  })
</script>

<style>
  .webmention-count {
    @apply flex items-center gap-4 text-sm;
    color: var(--color-text-muted);
  }

  .interaction-stat {
    @apply flex items-center gap-1.5 transition-colors;
    display: none; /* Hidden by default, shown when counts > 0 */
  }

  .interaction-stat:hover {
    color: var(--color-accent);
  }

  .stat-icon {
    @apply w-4 h-4 flex-shrink-0;
  }

  .count {
    @apply font-medium;
  }

  /* Show total count when there are interactions */
  .webmention-count:not(:empty) .interaction-stat:last-child {
    /* Remove divider styling */
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .webmention-count {
      @apply gap-3 text-xs;
    }

    .stat-icon {
      @apply w-3.5 h-3.5;
    }
  }
</style>
