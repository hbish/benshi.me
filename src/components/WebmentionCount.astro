---
export interface Props {
  target: string
}

const { target } = Astro.props
---

<div class="webmention-count" data-target={target}>
  <span class="webmention-likes">
    <span class="count">0</span> 👏
  </span>
  <span class="webmention-replies">
    <span class="count">0</span> 💬
  </span>
</div>

<script>
  class WebmentionCount {
    constructor(element) {
      this.element = element
      this.target = element.dataset.target
      this.fetchCounts()
    }

    async fetchCounts() {
      if (!this.target) return

      try {
        const response = await fetch(
          `https://webmention.io/api/count?target=${encodeURIComponent(this.target)}`
        )
        const data = await response.json()

        const likesCount = (data.type?.like || 0) + (data.type?.repost || 0)
        const repliesCount = (data.type?.reply || 0) + (data.type?.mention || 0)

        this.updateCount('.webmention-likes .count', likesCount)
        this.updateCount('.webmention-replies .count', repliesCount)
      } catch (error) {
        console.warn('Failed to fetch webmention counts:', error)
      }
    }

    updateCount(selector, count) {
      const element = this.element.querySelector(selector)
      if (element) {
        element.textContent = count.toString()
      }
    }
  }

  // Initialize webmention counts
  document.addEventListener('DOMContentLoaded', () => {
    const elements = document.querySelectorAll('.webmention-count')
    elements.forEach(element => new WebmentionCount(element))
  })
</script>

<style>
  .webmention-count {
    @apply flex items-center gap-4 text-sm;
    color: var(--color-text-muted);
  }

  .webmention-likes,
  .webmention-replies {
    @apply flex items-center gap-1;
  }

  .count {
    @apply font-medium;
  }
</style>
