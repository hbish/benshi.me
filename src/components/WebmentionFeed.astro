---
export interface Props {
  target: string
}

const { target } = Astro.props
---

<div class="social-interactions" data-target={target}>
  <!-- Encourage Participation Section -->
  <div class="participation-encouragement">
    <h3 class="interactions-title">💬 Join the Conversation</h3>
    <p class="encouragement-text">
      Found this interesting? Share your thoughts by mentioning this post on your blog, Twitter,
      Mastodon, or other social platforms. Your interactions will appear here!
    </p>
  </div>

  <!-- Enhanced Sharing Buttons -->
  <div class="sharing-section">
    <h4 class="sharing-title">Share this post:</h4>
    <div class="sharing-buttons">
      <a href="#" class="share-button twitter" data-platform="twitter" title="Share on Twitter">
        <svg class="share-icon" viewBox="0 0 24 24" fill="currentColor">
          <path
            d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"
          ></path>
        </svg>
        Twitter
      </a>
      <a href="#" class="share-button mastodon" data-platform="mastodon" title="Share on Mastodon">
        <svg class="share-icon" viewBox="0 0 24 24" fill="currentColor">
          <path
            d="M23.268 5.313c-.35-2.578-2.617-4.61-5.304-5.004C17.51.242 15.792 0 11.813 0h-.03c-3.98 0-4.835.242-5.288.309C3.882.692 1.496 2.518.917 5.127.64 6.412.61 7.837.661 9.143c.074 1.874.088 3.745.26 5.611.118 1.24.325 2.47.62 3.68.55 2.237 2.777 4.098 4.96 4.857 2.336.792 4.849.923 7.256.38.265-.061.527-.132.786-.213.585-.184 1.27-.39 1.774-.753a.057.057 0 0 0 .023-.043v-1.809a.052.052 0 0 0-.02-.041.053.053 0 0 0-.046-.01 20.282 20.282 0 0 1-4.709.545c-2.73 0-3.463-1.284-3.674-1.818a5.593 5.593 0 0 1-.319-1.433.053.053 0 0 1 .066-.054c1.517.363 3.072.546 4.632.546.376 0 .75 0 1.125-.01 1.57-.044 3.224-.124 4.768-.422.038-.008.077-.015.11-.024 2.435-.464 4.753-1.92 4.989-5.604.008-.145.03-1.52.03-1.67.002-.512.167-3.63-.024-5.545zm-3.748 9.195h-2.561V8.29c0-1.309-.55-1.976-1.67-1.976-1.23 0-1.846.79-1.846 2.35v3.403h-2.546V8.663c0-1.56-.617-2.35-1.848-2.35-1.112 0-1.668.668-1.67 1.977v6.218H4.822V8.102c0-1.31.337-2.35 1.011-3.12.696-.77 1.608-1.164 2.74-1.164 1.311 0 2.302.5 2.962 1.498l.638 1.06.638-1.06c.66-.999 1.65-1.498 2.96-1.498 1.13 0 2.043.395 2.74 1.164.675.77 1.012 1.81 1.012 3.12z"
          ></path>
        </svg>
        Mastodon
      </a>
      <a href="#" class="share-button linkedin" data-platform="linkedin" title="Share on LinkedIn">
        <svg class="share-icon" viewBox="0 0 24 24" fill="currentColor">
          <path
            d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"
          ></path>
        </svg>
        LinkedIn
      </a>
      <a href="#" class="share-button copy-link" data-platform="copy" title="Copy link">
        <svg class="share-icon" viewBox="0 0 24 24" fill="currentColor">
          <path
            d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"
          ></path>
        </svg>
        Copy Link
      </a>
    </div>
  </div>

  <!-- Unified Interactions Feed -->
  <div class="interactions-feed">
    <div class="feed-header">
      <h4 class="feed-title">Social Interactions</h4>
      <!-- Development debug controls -->
      <div class="debug-controls" style="display: none;">
        <button class="debug-toggle" title="Toggle mock data">🧪 Debug</button>
      </div>
    </div>
    <div class="interactions-container"></div>
    <div class="interactions-empty" style="display: none;">
      <p>No interactions yet. Be the first to share your thoughts!</p>
    </div>
  </div>
</div>

<script>
  class SocialInteractions {
    constructor(element) {
      this.element = element
      this.target = element.dataset.target
      this.page = 0
      this.perPage = 50
      this.debugMode = false
      this.initSharingButtons()
      this.initDebugControls()
      this.fetchWebmentions()
    }

    initDebugControls() {
      const isDev =
        window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1'

      if (isDev) {
        const debugControls = this.element.querySelector('.debug-controls')
        const debugToggle = this.element.querySelector('.debug-toggle')

        if (debugControls && debugToggle) {
          debugControls.style.display = 'block'

          debugToggle.addEventListener('click', () => {
            this.debugMode = !this.debugMode
            debugToggle.textContent = this.debugMode ? '🔧 Real Data' : '🧪 Debug'
            debugToggle.title = this.debugMode ? 'Switch to real data' : 'Switch to mock data'
            this.fetchWebmentions()
          })
        }
      }
    }

    initSharingButtons() {
      const shareButtons = this.element.querySelectorAll('.share-button')
      shareButtons.forEach(button => {
        button.addEventListener('click', e => {
          e.preventDefault()
          const platform = button.dataset.platform
          this.handleShare(platform)
        })
      })
    }

    handleShare(platform) {
      const url = encodeURIComponent(window.location.href)
      const title = encodeURIComponent(document.title)

      const shareUrls = {
        twitter: `https://twitter.com/intent/tweet?url=${url}&text=${title}`,
        mastodon: `https://mastodon.social/share?text=${title} ${url}`,
        linkedin: `https://www.linkedin.com/sharing/share-offsite/?url=${url}`,
        copy: null,
      }

      if (platform === 'copy') {
        navigator.clipboard.writeText(window.location.href).then(() => {
          this.showCopyFeedback()
        })
      } else {
        window.open(shareUrls[platform], '_blank', 'width=600,height=400')
      }
    }

    showCopyFeedback() {
      const copyButton = this.element.querySelector('.share-button.copy-link')
      const originalText = copyButton.innerHTML
      copyButton.innerHTML = `
        <svg class="share-icon" viewBox="0 0 24 24" fill="currentColor">
          <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
        </svg>
        Copied!
      `

      setTimeout(() => {
        copyButton.innerHTML = originalText
      }, 2000)
    }

    async fetchWebmentions() {
      if (!this.target) return

      const isDev =
        window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1'

      // Force mock data in debug mode
      if (this.debugMode) {
        this.renderInteractions(this.getMockWebmentions())
        return
      }

      try {
        const response = await fetch(
          `https://webmention.io/api/mentions.jf2?target=${encodeURIComponent(this.target)}&per-page=${this.perPage}&page=${this.page}`
        )
        const data = await response.json()

        if (data.children && data.children.length > 0) {
          this.renderInteractions(data.children)
        } else if (isDev) {
          // Show mock data in development when no real data exists
          this.renderInteractions(this.getMockWebmentions())
        } else {
          this.showEmptyState()
        }
      } catch (error) {
        console.warn('Failed to fetch webmentions:', error)

        if (isDev) {
          // Show mock data if fetch fails in development
          this.renderInteractions(this.getMockWebmentions())
        } else {
          this.showEmptyState()
        }
      }
    }

    getMockWebmentions() {
      return [
        {
          'wm-property': 'like-of',
          author: {
            name: 'Alice Johnson',
            photo: 'https://github.com/alice.png',
            url: 'https://alice.dev',
          },
          published: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days ago
          url: 'https://alice.dev/posts/123',
        },
        {
          'wm-property': 'in-reply-to',
          author: {
            name: 'Bob Smith',
            photo: 'https://github.com/bob.png',
            url: 'https://bob.blog',
          },
          content: {
            text: 'Great post! I had a similar experience when I was working on my project. The approach you described really helped me solve a tricky problem.',
          },
          published: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(), // 5 days ago
          url: 'https://bob.blog/reply/456',
        },
        {
          'wm-property': 'repost-of',
          author: {
            name: 'Carol Chen',
            photo: 'https://github.com/carol.png',
            url: 'https://carol.social',
          },
          content: {
            text: 'This is exactly what I needed to read today. Sharing with my team!',
          },
          published: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // 1 week ago
          url: 'https://carol.social/repost/789',
        },
        {
          'wm-property': 'mention-of',
          author: {
            name: 'David Kim',
            photo: 'https://github.com/david.png',
            url: 'https://david.tech',
          },
          content: {
            text: 'Found this article really insightful. The section about best practices was particularly useful for our current project architecture.',
          },
          published: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(), // 10 days ago
          url: 'https://david.tech/mentions/101',
        },
        {
          'wm-property': 'like-of',
          author: {
            name: 'Eve Martinez',
            photo: 'https://github.com/eve.png',
            url: 'https://eve.codes',
          },
          published: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString(), // 2 weeks ago
          url: 'https://eve.codes/likes/202',
        },
      ]
    }

    renderInteractions(webmentions) {
      const container = this.element.querySelector('.interactions-container')
      const emptyState = this.element.querySelector('.interactions-empty')

      if (!webmentions.length) {
        this.showEmptyState()
        return
      }

      // Sort by date (newest first)
      const sortedMentions = webmentions.sort((a, b) => {
        const dateA = new Date(a.published || a['wm-received'] || 0)
        const dateB = new Date(b.published || b['wm-received'] || 0)
        return dateB - dateA
      })

      container.innerHTML = sortedMentions.map(mention => this.renderInteraction(mention)).join('')

      emptyState.style.display = 'none'
    }

    renderInteraction(mention) {
      const type = mention['wm-property']
      const author = mention.author || {}
      const name = author.name || 'Anonymous'
      const photo = author.photo || '/android-chrome-192x192.png'
      const url = author.url || mention.url || '#'
      const publishedRaw = mention.published || mention['wm-received']
      const published = publishedRaw ? this.formatDate(new Date(publishedRaw)) : ''

      const { icon, label, content } = this.getInteractionDetails(mention, type)

      return `
        <div class="interaction-item ${type}">
          <div class="interaction-header">
            <div class="interaction-meta">
              <div class="interaction-author-info">
                <img src="${this.escapeHtml(photo)}" 
                     alt="${this.escapeHtml(name)}"
                     class="interaction-avatar"
                     onerror="this.src='/android-chrome-192x192.png'"
                     loading="lazy" />
                <a href="${this.escapeHtml(url)}" 
                   class="interaction-author-name"
                   target="_blank"
                   rel="noopener noreferrer">
                  ${this.escapeHtml(name)}
                </a>
              </div>
              <div class="interaction-type">
                ${icon}
                <span class="interaction-label">${label}</span>
              </div>
            </div>
            <time class="interaction-date">${published}</time>
          </div>
          
          <div class="interaction-content">
            ${
              content
                ? `
              <div class="interaction-text">
                ${this.sanitizeContent(content)}
              </div>
            `
                : `
              <div class="interaction-no-content">
                <em>No additional content</em>
              </div>
            `
            }
            
            <a href="${this.escapeHtml(mention.url || url)}" 
               class="interaction-source"
               target="_blank"
               rel="noopener noreferrer">
              View original →
            </a>
          </div>
        </div>
      `
    }

    getInteractionDetails(mention, type) {
      const content = mention.content?.text || mention.content?.html || ''

      switch (type) {
        case 'like-of':
          return {
            icon: '❤️',
            label: 'liked this',
            content: null,
          }
        case 'repost-of':
          return {
            icon: '🔄',
            label: 'reposted this',
            content: content,
          }
        case 'in-reply-to':
          return {
            icon: '💬',
            label: 'replied',
            content: content,
          }
        case 'mention-of':
          return {
            icon: '📝',
            label: 'mentioned this',
            content: content,
          }
        default:
          return {
            icon: '💭',
            label: 'interacted',
            content: content,
          }
      }
    }

    formatDate(date) {
      const now = new Date()
      const diffTime = Math.abs(now - date)
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))

      if (diffDays === 1) return 'Yesterday'
      if (diffDays <= 7) return `${diffDays} days ago`
      if (diffDays <= 30) return `${Math.ceil(diffDays / 7)} weeks ago`
      if (diffDays <= 365) return `${Math.ceil(diffDays / 30)} months ago`

      return date.toLocaleDateString()
    }

    showEmptyState() {
      const container = this.element.querySelector('.interactions-container')
      const emptyState = this.element.querySelector('.interactions-empty')

      container.innerHTML = ''
      emptyState.style.display = 'block'
    }

    escapeHtml(unsafe) {
      return unsafe
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;')
    }

    sanitizeContent(content) {
      // Basic content sanitization with excerpt generation
      const cleaned = content
        .replace(/<script[^>]*>.*?<\/script>/gi, '')
        .replace(/<iframe[^>]*>.*?<\/iframe>/gi, '')
        .replace(/<object[^>]*>.*?<\/object>/gi, '')
        .replace(/<embed[^>]*>/gi, '')
        .replace(/<form[^>]*>.*?<\/form>/gi, '')
        .replace(/on\w+\s*=\s*"[^"]*"/gi, '')
        .replace(/on\w+\s*=\s*'[^']*'/gi, '')
        .replace(/javascript:/gi, '')

      // Create excerpt (first 150 characters)
      const excerpt = cleaned.length > 150 ? cleaned.substring(0, 150) + '...' : cleaned

      return excerpt
    }
  }

  // Initialize social interactions
  document.addEventListener('DOMContentLoaded', () => {
    const elements = document.querySelectorAll('.social-interactions')
    elements.forEach(element => new SocialInteractions(element))
  })
</script>

<style>
  .social-interactions {
    @apply mt-8 space-y-8;
  }

  /* Participation Encouragement */
  .participation-encouragement {
    @apply p-6 rounded-lg;
    background: linear-gradient(135deg, var(--color-bg-secondary) 0%, var(--color-bg) 100%);
    border: 1px solid var(--color-border);
  }

  .interactions-title {
    @apply text-xl font-medium mb-3;
    color: var(--color-text);
    font-family: 'Playfair Display', serif;
  }

  .encouragement-text {
    @apply text-base leading-relaxed mb-0;
    color: var(--color-text-muted);
  }

  /* Enhanced Sharing Section */
  .sharing-section {
    @apply space-y-4;
  }

  .sharing-title {
    @apply text-lg font-medium;
    color: var(--color-text);
    font-family: 'Playfair Display', serif;
  }

  .sharing-buttons {
    @apply flex flex-wrap gap-3;
  }

  .share-button {
    @apply inline-flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-all duration-200;
    border: 2px solid var(--color-border);
    color: var(--color-text);
    text-decoration: none;
    background: var(--color-bg);
  }

  .share-button:hover {
    @apply transform -translate-y-1 shadow-lg;
    border-color: var(--color-accent);
    color: var(--color-accent);
  }

  .share-button.twitter:hover {
    border-color: #1da1f2;
    color: #1da1f2;
  }

  .share-button.mastodon:hover {
    border-color: #6364ff;
    color: #6364ff;
  }

  .share-button.linkedin:hover {
    border-color: #0077b5;
    color: #0077b5;
  }

  .share-icon {
    @apply w-4 h-4 flex-shrink-0;
  }

  /* Interactions Feed */
  .interactions-feed {
    @apply space-y-6;
  }

  .feed-header {
    @apply flex items-center justify-between pb-4 border-b;
    border-color: var(--color-border);
  }

  .feed-title {
    @apply text-lg font-medium;
    color: var(--color-text);
    font-family: 'Playfair Display', serif;
  }

  .debug-controls {
    @apply flex items-center gap-2;
  }

  .debug-toggle {
    @apply px-2 py-1 text-xs rounded border transition-colors;
    background: var(--color-bg-secondary);
    border-color: var(--color-border);
    color: var(--color-text-muted);
    cursor: pointer;
  }

  .debug-toggle:hover {
    background: var(--color-accent);
    color: var(--color-bg);
    border-color: var(--color-accent);
  }

  .interactions-container {
    @apply space-y-4;
  }

  .interactions-empty {
    @apply text-center py-8;
  }

  .interactions-empty p {
    @apply text-base;
    color: var(--color-text-muted);
  }

  /* Individual Interaction Items */
  .interaction-item {
    @apply p-4 rounded-lg border transition-all duration-200;
    border-color: var(--color-border);
    background: var(--color-bg);
    /* Debug: Add subtle background to see layout bounds */
    position: relative;
  }

  .interaction-item:hover {
    @apply shadow-md;
    border-color: var(--color-accent);
  }

  .interaction-header {
    @apply flex items-start justify-between mb-3 gap-4;
  }

  .interaction-meta {
    @apply flex items-center gap-3 flex-1;
  }

  .interaction-author-info {
    @apply flex items-center gap-1.5 flex-shrink-0;
  }

  .interaction-type {
    @apply flex items-center gap-2;
  }

  .interaction-label {
    @apply text-sm font-medium;
    color: var(--color-text-muted);
  }

  .interaction-date {
    @apply text-sm;
    color: var(--color-text-muted);
  }

  .interaction-content {
    @apply ml-0;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .interaction-avatar {
    @apply w-5 h-5 rounded-full flex-shrink-0;
    border-radius: 50% !important;
    /* Disable global image hover effects for avatars */
    transform: none !important;
    transition: none !important;
  }

  .interaction-avatar:hover {
    transform: none !important;
    box-shadow: none !important;
  }

  .interaction-author-name {
    @apply text-sm font-medium transition-colors;
    color: var(--color-text);
    text-decoration: none;
    white-space: nowrap;
  }

  .interaction-author-name:hover {
    color: var(--color-accent);
  }

  .interaction-text {
    @apply text-base leading-relaxed;
    color: var(--color-text);
  }

  .interaction-no-content {
    @apply text-sm italic;
    color: var(--color-text-muted);
  }

  .interaction-source {
    @apply text-sm font-medium transition-colors;
    color: var(--color-accent);
  }

  .interaction-source:hover {
    color: var(--color-accent-hover);
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .sharing-buttons {
      @apply grid grid-cols-2 gap-2;
    }

    .share-button {
      @apply justify-center text-sm px-3 py-2;
    }

    .interaction-item {
      @apply p-3;
    }

    .interaction-header {
      @apply flex-col items-start gap-2;
    }

    .interaction-meta {
      @apply flex-col items-start gap-2 w-full;
    }

    .interaction-author-info {
      @apply w-full;
    }

    .interaction-type {
      @apply w-full;
    }

    .interaction-date {
      @apply self-end text-xs;
    }

    .interactions-title {
      @apply text-lg;
    }
  }
</style>
